// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: worker_service.proto

package protobuf

import (
	context "context"
	encoding_binary "encoding/binary"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ShutDownRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShutDownRequest) Reset()         { *m = ShutDownRequest{} }
func (m *ShutDownRequest) String() string { return proto.CompactTextString(m) }
func (*ShutDownRequest) ProtoMessage()    {}
func (*ShutDownRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{0}
}
func (m *ShutDownRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShutDownRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShutDownRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShutDownRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutDownRequest.Merge(m, src)
}
func (m *ShutDownRequest) XXX_Size() int {
	return m.Size()
}
func (m *ShutDownRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutDownRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ShutDownRequest proto.InternalMessageInfo

type ShutDownResponse struct {
	IterationNum         int32    `protobuf:"varint,1,opt,name=iterationNum,proto3" json:"iterationNum,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ShutDownResponse) Reset()         { *m = ShutDownResponse{} }
func (m *ShutDownResponse) String() string { return proto.CompactTextString(m) }
func (*ShutDownResponse) ProtoMessage()    {}
func (*ShutDownResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{1}
}
func (m *ShutDownResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ShutDownResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ShutDownResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ShutDownResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ShutDownResponse.Merge(m, src)
}
func (m *ShutDownResponse) XXX_Size() int {
	return m.Size()
}
func (m *ShutDownResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ShutDownResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ShutDownResponse proto.InternalMessageInfo

type ExchangeRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExchangeRequest) Reset()         { *m = ExchangeRequest{} }
func (m *ExchangeRequest) String() string { return proto.CompactTextString(m) }
func (*ExchangeRequest) ProtoMessage()    {}
func (*ExchangeRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{2}
}
func (m *ExchangeRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeRequest.Merge(m, src)
}
func (m *ExchangeRequest) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeRequest proto.InternalMessageInfo

type ExchangeResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ExchangeResponse) Reset()         { *m = ExchangeResponse{} }
func (m *ExchangeResponse) String() string { return proto.CompactTextString(m) }
func (*ExchangeResponse) ProtoMessage()    {}
func (*ExchangeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{3}
}
func (m *ExchangeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ExchangeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ExchangeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ExchangeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ExchangeResponse.Merge(m, src)
}
func (m *ExchangeResponse) XXX_Size() int {
	return m.Size()
}
func (m *ExchangeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_ExchangeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_ExchangeResponse proto.InternalMessageInfo

type PEvalRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PEvalRequest) Reset()         { *m = PEvalRequest{} }
func (m *PEvalRequest) String() string { return proto.CompactTextString(m) }
func (*PEvalRequest) ProtoMessage()    {}
func (*PEvalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{4}
}
func (m *PEvalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PEvalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PEvalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PEvalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PEvalRequest.Merge(m, src)
}
func (m *PEvalRequest) XXX_Size() int {
	return m.Size()
}
func (m *PEvalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PEvalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PEvalRequest proto.InternalMessageInfo

type PEvalResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PEvalResponse) Reset()         { *m = PEvalResponse{} }
func (m *PEvalResponse) String() string { return proto.CompactTextString(m) }
func (*PEvalResponse) ProtoMessage()    {}
func (*PEvalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{5}
}
func (m *PEvalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PEvalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PEvalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PEvalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PEvalResponse.Merge(m, src)
}
func (m *PEvalResponse) XXX_Size() int {
	return m.Size()
}
func (m *PEvalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PEvalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PEvalResponse proto.InternalMessageInfo

type IncEvalRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncEvalRequest) Reset()         { *m = IncEvalRequest{} }
func (m *IncEvalRequest) String() string { return proto.CompactTextString(m) }
func (*IncEvalRequest) ProtoMessage()    {}
func (*IncEvalRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{6}
}
func (m *IncEvalRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncEvalRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncEvalRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncEvalRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncEvalRequest.Merge(m, src)
}
func (m *IncEvalRequest) XXX_Size() int {
	return m.Size()
}
func (m *IncEvalRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_IncEvalRequest.DiscardUnknown(m)
}

var xxx_messageInfo_IncEvalRequest proto.InternalMessageInfo

type IncEvalResponse struct {
	Update               bool     `protobuf:"varint,1,opt,name=update,proto3" json:"update,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *IncEvalResponse) Reset()         { *m = IncEvalResponse{} }
func (m *IncEvalResponse) String() string { return proto.CompactTextString(m) }
func (*IncEvalResponse) ProtoMessage()    {}
func (*IncEvalResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{7}
}
func (m *IncEvalResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *IncEvalResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_IncEvalResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *IncEvalResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_IncEvalResponse.Merge(m, src)
}
func (m *IncEvalResponse) XXX_Size() int {
	return m.Size()
}
func (m *IncEvalResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_IncEvalResponse.DiscardUnknown(m)
}

var xxx_messageInfo_IncEvalResponse proto.InternalMessageInfo

type AssembleRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssembleRequest) Reset()         { *m = AssembleRequest{} }
func (m *AssembleRequest) String() string { return proto.CompactTextString(m) }
func (*AssembleRequest) ProtoMessage()    {}
func (*AssembleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{8}
}
func (m *AssembleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssembleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssembleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssembleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssembleRequest.Merge(m, src)
}
func (m *AssembleRequest) XXX_Size() int {
	return m.Size()
}
func (m *AssembleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_AssembleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_AssembleRequest proto.InternalMessageInfo

type AssembleResponse struct {
	Ok                   bool     `protobuf:"varint,1,opt,name=ok,proto3" json:"ok,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AssembleResponse) Reset()         { *m = AssembleResponse{} }
func (m *AssembleResponse) String() string { return proto.CompactTextString(m) }
func (*AssembleResponse) ProtoMessage()    {}
func (*AssembleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{9}
}
func (m *AssembleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *AssembleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_AssembleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *AssembleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AssembleResponse.Merge(m, src)
}
func (m *AssembleResponse) XXX_Size() int {
	return m.Size()
}
func (m *AssembleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_AssembleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_AssembleResponse proto.InternalMessageInfo

type SSSPMessageRequest struct {
	Pair                 []*SSSPMessageStruct `protobuf:"bytes,1,rep,name=pair,proto3" json:"pair,omitempty"`
	CalculateStep        bool                 `protobuf:"varint,2,opt,name=calculateStep,proto3" json:"calculateStep,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *SSSPMessageRequest) Reset()         { *m = SSSPMessageRequest{} }
func (m *SSSPMessageRequest) String() string { return proto.CompactTextString(m) }
func (*SSSPMessageRequest) ProtoMessage()    {}
func (*SSSPMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{10}
}
func (m *SSSPMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SSSPMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SSSPMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SSSPMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSSPMessageRequest.Merge(m, src)
}
func (m *SSSPMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *SSSPMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SSSPMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SSSPMessageRequest proto.InternalMessageInfo

type SSSPMessageStruct struct {
	NodeID               int64    `protobuf:"varint,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	Distance             float64  `protobuf:"fixed64,2,opt,name=distance,proto3" json:"distance,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSSPMessageStruct) Reset()         { *m = SSSPMessageStruct{} }
func (m *SSSPMessageStruct) String() string { return proto.CompactTextString(m) }
func (*SSSPMessageStruct) ProtoMessage()    {}
func (*SSSPMessageStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{11}
}
func (m *SSSPMessageStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SSSPMessageStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SSSPMessageStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SSSPMessageStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSSPMessageStruct.Merge(m, src)
}
func (m *SSSPMessageStruct) XXX_Size() int {
	return m.Size()
}
func (m *SSSPMessageStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_SSSPMessageStruct.DiscardUnknown(m)
}

var xxx_messageInfo_SSSPMessageStruct proto.InternalMessageInfo

type SSSPMessageResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SSSPMessageResponse) Reset()         { *m = SSSPMessageResponse{} }
func (m *SSSPMessageResponse) String() string { return proto.CompactTextString(m) }
func (*SSSPMessageResponse) ProtoMessage()    {}
func (*SSSPMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{12}
}
func (m *SSSPMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SSSPMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SSSPMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SSSPMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SSSPMessageResponse.Merge(m, src)
}
func (m *SSSPMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *SSSPMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SSSPMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SSSPMessageResponse proto.InternalMessageInfo

type SimMessageRequest struct {
	Pair                 []*SimMessageStruct `protobuf:"bytes,1,rep,name=pair,proto3" json:"pair,omitempty"`
	CalculateStep        bool                `protobuf:"varint,2,opt,name=calculateStep,proto3" json:"calculateStep,omitempty"`
	FromId               int32               `protobuf:"varint,3,opt,name=fromId,proto3" json:"fromId,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SimMessageRequest) Reset()         { *m = SimMessageRequest{} }
func (m *SimMessageRequest) String() string { return proto.CompactTextString(m) }
func (*SimMessageRequest) ProtoMessage()    {}
func (*SimMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{13}
}
func (m *SimMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimMessageRequest.Merge(m, src)
}
func (m *SimMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *SimMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_SimMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_SimMessageRequest proto.InternalMessageInfo

type SimMessageResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimMessageResponse) Reset()         { *m = SimMessageResponse{} }
func (m *SimMessageResponse) String() string { return proto.CompactTextString(m) }
func (*SimMessageResponse) ProtoMessage()    {}
func (*SimMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{14}
}
func (m *SimMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimMessageResponse.Merge(m, src)
}
func (m *SimMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *SimMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_SimMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_SimMessageResponse proto.InternalMessageInfo

type SimMessageStruct struct {
	PatternId            int64    `protobuf:"varint,1,opt,name=patternId,proto3" json:"patternId,omitempty"`
	DataId               int64    `protobuf:"varint,2,opt,name=dataId,proto3" json:"dataId,omitempty"`
	Times                int32    `protobuf:"varint,3,opt,name=times,proto3" json:"times,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *SimMessageStruct) Reset()         { *m = SimMessageStruct{} }
func (m *SimMessageStruct) String() string { return proto.CompactTextString(m) }
func (*SimMessageStruct) ProtoMessage()    {}
func (*SimMessageStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{15}
}
func (m *SimMessageStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SimMessageStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SimMessageStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SimMessageStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimMessageStruct.Merge(m, src)
}
func (m *SimMessageStruct) XXX_Size() int {
	return m.Size()
}
func (m *SimMessageStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_SimMessageStruct.DiscardUnknown(m)
}

var xxx_messageInfo_SimMessageStruct proto.InternalMessageInfo

type PRMessageRequest struct {
	Pair                 []*PRMessageStruct `protobuf:"bytes,1,rep,name=pair,proto3" json:"pair,omitempty"`
	CalculateStep        bool               `protobuf:"varint,2,opt,name=calculateStep,proto3" json:"calculateStep,omitempty"`
	XXX_NoUnkeyedLiteral struct{}           `json:"-"`
	XXX_unrecognized     []byte             `json:"-"`
	XXX_sizecache        int32              `json:"-"`
}

func (m *PRMessageRequest) Reset()         { *m = PRMessageRequest{} }
func (m *PRMessageRequest) String() string { return proto.CompactTextString(m) }
func (*PRMessageRequest) ProtoMessage()    {}
func (*PRMessageRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{16}
}
func (m *PRMessageRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PRMessageRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PRMessageRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PRMessageRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PRMessageRequest.Merge(m, src)
}
func (m *PRMessageRequest) XXX_Size() int {
	return m.Size()
}
func (m *PRMessageRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PRMessageRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PRMessageRequest proto.InternalMessageInfo

type PRMessageResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PRMessageResponse) Reset()         { *m = PRMessageResponse{} }
func (m *PRMessageResponse) String() string { return proto.CompactTextString(m) }
func (*PRMessageResponse) ProtoMessage()    {}
func (*PRMessageResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{17}
}
func (m *PRMessageResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PRMessageResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PRMessageResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PRMessageResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PRMessageResponse.Merge(m, src)
}
func (m *PRMessageResponse) XXX_Size() int {
	return m.Size()
}
func (m *PRMessageResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PRMessageResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PRMessageResponse proto.InternalMessageInfo

type PRMessageStruct struct {
	NodeID               int64    `protobuf:"varint,1,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	PrVal                float64  `protobuf:"fixed64,2,opt,name=prVal,proto3" json:"prVal,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PRMessageStruct) Reset()         { *m = PRMessageStruct{} }
func (m *PRMessageStruct) String() string { return proto.CompactTextString(m) }
func (*PRMessageStruct) ProtoMessage()    {}
func (*PRMessageStruct) Descriptor() ([]byte, []int) {
	return fileDescriptor_f7f08008c4ed518b, []int{18}
}
func (m *PRMessageStruct) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PRMessageStruct) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PRMessageStruct.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PRMessageStruct) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PRMessageStruct.Merge(m, src)
}
func (m *PRMessageStruct) XXX_Size() int {
	return m.Size()
}
func (m *PRMessageStruct) XXX_DiscardUnknown() {
	xxx_messageInfo_PRMessageStruct.DiscardUnknown(m)
}

var xxx_messageInfo_PRMessageStruct proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ShutDownRequest)(nil), "protobuf.shutDownRequest")
	proto.RegisterType((*ShutDownResponse)(nil), "protobuf.shutDownResponse")
	proto.RegisterType((*ExchangeRequest)(nil), "protobuf.exchangeRequest")
	proto.RegisterType((*ExchangeResponse)(nil), "protobuf.exchangeResponse")
	proto.RegisterType((*PEvalRequest)(nil), "protobuf.pEvalRequest")
	proto.RegisterType((*PEvalResponse)(nil), "protobuf.pEvalResponse")
	proto.RegisterType((*IncEvalRequest)(nil), "protobuf.incEvalRequest")
	proto.RegisterType((*IncEvalResponse)(nil), "protobuf.incEvalResponse")
	proto.RegisterType((*AssembleRequest)(nil), "protobuf.assembleRequest")
	proto.RegisterType((*AssembleResponse)(nil), "protobuf.assembleResponse")
	proto.RegisterType((*SSSPMessageRequest)(nil), "protobuf.sSSPMessageRequest")
	proto.RegisterType((*SSSPMessageStruct)(nil), "protobuf.sSSPMessageStruct")
	proto.RegisterType((*SSSPMessageResponse)(nil), "protobuf.sSSPMessageResponse")
	proto.RegisterType((*SimMessageRequest)(nil), "protobuf.simMessageRequest")
	proto.RegisterType((*SimMessageResponse)(nil), "protobuf.simMessageResponse")
	proto.RegisterType((*SimMessageStruct)(nil), "protobuf.simMessageStruct")
	proto.RegisterType((*PRMessageRequest)(nil), "protobuf.pRMessageRequest")
	proto.RegisterType((*PRMessageResponse)(nil), "protobuf.pRMessageResponse")
	proto.RegisterType((*PRMessageStruct)(nil), "protobuf.pRMessageStruct")
}

func init() { proto.RegisterFile("worker_service.proto", fileDescriptor_f7f08008c4ed518b) }

var fileDescriptor_f7f08008c4ed518b = []byte{
	// 634 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0xcd, 0x6e, 0xd3, 0x4c,
	0x14, 0x8d, 0x9b, 0x26, 0xcd, 0x77, 0xbf, 0xb6, 0x49, 0xa6, 0xa1, 0xa4, 0x6e, 0x09, 0xd5, 0x88,
	0x45, 0x59, 0x34, 0x95, 0x8a, 0xc4, 0x82, 0x0d, 0x7f, 0x2d, 0x28, 0x48, 0xa0, 0xc8, 0x96, 0x60,
	0x07, 0x9a, 0xd8, 0xd3, 0xd4, 0x4a, 0xec, 0x31, 0x9e, 0x71, 0xcb, 0x96, 0xb7, 0xe0, 0x41, 0x78,
	0x88, 0x2e, 0x79, 0x04, 0x08, 0x2f, 0x82, 0x3c, 0x19, 0xdb, 0x63, 0xd7, 0x59, 0xc0, 0x2a, 0x39,
	0xf7, 0xe7, 0xdc, 0x7b, 0x66, 0x7c, 0x06, 0x7a, 0xd7, 0x2c, 0x9a, 0xd1, 0xe8, 0x13, 0xa7, 0xd1,
	0x95, 0xe7, 0xd0, 0x61, 0x18, 0x31, 0xc1, 0x50, 0x4b, 0xfe, 0x4c, 0xe2, 0x0b, 0xf3, 0x78, 0xea,
	0x89, 0xcb, 0x78, 0x32, 0x74, 0x98, 0x7f, 0x32, 0x65, 0x53, 0x76, 0x92, 0x66, 0x24, 0x92, 0x40,
	0xfe, 0x5b, 0x36, 0xe2, 0x2e, 0xb4, 0xf9, 0x65, 0x2c, 0xce, 0xd8, 0x75, 0x60, 0xd1, 0xcf, 0x31,
	0xe5, 0x02, 0x3f, 0x86, 0x4e, 0x1e, 0xe2, 0x21, 0x0b, 0x38, 0x45, 0x18, 0x36, 0x3d, 0x41, 0x23,
	0x22, 0x3c, 0x16, 0xbc, 0x8b, 0xfd, 0xbe, 0x71, 0x68, 0x1c, 0x35, 0xac, 0x42, 0x2c, 0xa1, 0xa2,
	0x5f, 0x9c, 0x4b, 0x12, 0x4c, 0x69, 0x4a, 0x85, 0xa1, 0x93, 0x87, 0x14, 0xd5, 0x36, 0xac, 0xb1,
	0x99, 0x24, 0x68, 0x59, 0x6b, 0x6c, 0x86, 0xb7, 0x61, 0x33, 0x3c, 0xbf, 0x22, 0xf3, 0xb4, 0xe7,
	0x3e, 0x6c, 0x29, 0xbc, 0xa2, 0xa1, 0x03, 0xdb, 0x5e, 0xe0, 0xe8, 0x2d, 0x0f, 0xa1, 0x9d, 0x45,
	0x54, 0xd3, 0x2e, 0x34, 0xe3, 0xd0, 0x25, 0x82, 0xaa, 0x46, 0x85, 0x92, 0x25, 0x09, 0xe7, 0xd4,
	0x9f, 0xcc, 0xf5, 0x25, 0xf3, 0xd0, 0x8a, 0x99, 0x33, 0x40, 0xdc, 0xb6, 0xc7, 0x6f, 0x29, 0xe7,
	0x24, 0x93, 0x87, 0x4e, 0x60, 0x3d, 0x24, 0x5e, 0xd4, 0x37, 0x0e, 0xeb, 0x47, 0xff, 0x9f, 0xee,
	0x0f, 0xd3, 0xa3, 0x1e, 0x6a, 0xb5, 0xb6, 0x88, 0x62, 0x47, 0x58, 0xb2, 0x10, 0x3d, 0x80, 0x2d,
	0x87, 0xcc, 0x9d, 0x78, 0x4e, 0x04, 0xb5, 0x05, 0x0d, 0xfb, 0x6b, 0x72, 0x42, 0x31, 0x88, 0x5f,
	0x43, 0xf7, 0x16, 0x41, 0x22, 0x28, 0x60, 0x2e, 0x1d, 0x9d, 0xc9, 0xad, 0xea, 0x96, 0x42, 0xc8,
	0x84, 0x96, 0xeb, 0x71, 0x41, 0x02, 0x87, 0x4a, 0x36, 0xc3, 0xca, 0x30, 0xbe, 0x03, 0x3b, 0x85,
	0xad, 0x97, 0xe2, 0xf0, 0x57, 0x03, 0xba, 0xdc, 0xf3, 0x4b, 0x62, 0x86, 0x05, 0x31, 0xa6, 0x26,
	0x26, 0x2b, 0xfd, 0x7b, 0x2d, 0xc9, 0xda, 0x17, 0x11, 0xf3, 0x47, 0x6e, 0xbf, 0x2e, 0x3f, 0x19,
	0x85, 0x70, 0x0f, 0x90, 0xbe, 0x82, 0xda, 0xec, 0x23, 0x74, 0xca, 0xd3, 0xd0, 0x01, 0xfc, 0x17,
	0x12, 0x21, 0x68, 0x14, 0x8c, 0x5c, 0xa5, 0x3d, 0x0f, 0x24, 0xfc, 0x2e, 0x11, 0x64, 0xe4, 0xca,
	0xf1, 0x75, 0x4b, 0x21, 0xd4, 0x83, 0x86, 0xf0, 0x7c, 0xca, 0xd5, 0xd8, 0x25, 0xc0, 0x53, 0xe8,
	0x84, 0x56, 0x49, 0xf7, 0x71, 0x41, 0xf7, 0x5e, 0xae, 0x3b, 0xab, 0xfc, 0x87, 0x2b, 0xdc, 0x81,
	0xae, 0x36, 0x48, 0xa9, 0x7b, 0x0a, 0xed, 0x12, 0xe7, 0xca, 0x5b, 0xed, 0x41, 0x23, 0x8c, 0xde,
	0x93, 0xb9, 0xba, 0xd2, 0x25, 0x38, 0xfd, 0xbe, 0x0e, 0xcd, 0x0f, 0xd2, 0xfe, 0xe8, 0x25, 0xb4,
	0x6c, 0x65, 0x52, 0xa4, 0xed, 0x5c, 0xf2, 0xb2, 0x69, 0x56, 0xa5, 0xd4, 0x3a, 0x35, 0xf4, 0x04,
	0x1a, 0xe3, 0xc4, 0x35, 0x68, 0x57, 0x53, 0xad, 0x19, 0xcb, 0xbc, 0x7b, 0x2b, 0x9e, 0xf5, 0x3e,
	0x83, 0x8d, 0xd1, 0xd2, 0x73, 0xa8, 0x9f, 0x57, 0x15, 0x8d, 0x69, 0xee, 0x55, 0x64, 0x32, 0x86,
	0x37, 0xd0, 0x3e, 0x57, 0x8f, 0x83, 0x3a, 0x14, 0x5d, 0x49, 0xe9, 0x29, 0xd1, 0x95, 0x94, 0x9f,
	0x14, 0x5c, 0x4b, 0x8e, 0xe3, 0xb9, 0xf2, 0xb0, 0x4e, 0x52, 0xb2, 0xba, 0x4e, 0x52, 0xb6, 0x3c,
	0xae, 0xa1, 0x11, 0xb4, 0x6c, 0xdb, 0x1e, 0xdb, 0x34, 0x70, 0xd1, 0x41, 0xa5, 0x99, 0x53, 0x9e,
	0x7b, 0x2b, 0xb2, 0x19, 0xd5, 0x2b, 0xd8, 0xe0, 0x9e, 0x2f, 0x99, 0xf6, 0xab, 0x9c, 0x94, 0x12,
	0x1d, 0x54, 0x27, 0x35, 0x5d, 0xcd, 0xb1, 0x25, 0x69, 0xcc, 0x8a, 0x0f, 0x33, 0x65, 0xd9, 0xaf,
	0xcc, 0xa5, 0x24, 0x2f, 0x7a, 0x37, 0xbf, 0x06, 0xb5, 0x9b, 0xc5, 0xc0, 0xf8, 0xb1, 0x18, 0x18,
	0x3f, 0x17, 0x03, 0xe3, 0xdb, 0xef, 0x41, 0x6d, 0xd2, 0x94, 0x3d, 0x8f, 0xfe, 0x04, 0x00, 0x00,
	0xff, 0xff, 0xb3, 0xf5, 0x91, 0x18, 0x51, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// WorkerClient is the client API for Worker service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type WorkerClient interface {
	//service to master
	ShutDown(ctx context.Context, in *ShutDownRequest, opts ...grpc.CallOption) (*ShutDownResponse, error)
	PEval(ctx context.Context, in *PEvalRequest, opts ...grpc.CallOption) (*PEvalResponse, error)
	IncEval(ctx context.Context, in *IncEvalRequest, opts ...grpc.CallOption) (*IncEvalResponse, error)
	ExchangeMessage(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error)
	Assemble(ctx context.Context, in *AssembleRequest, opts ...grpc.CallOption) (*AssembleResponse, error)
	//service to worker
	SSSPSend(ctx context.Context, in *SSSPMessageRequest, opts ...grpc.CallOption) (*SSSPMessageResponse, error)
	SimSend(ctx context.Context, in *SimMessageRequest, opts ...grpc.CallOption) (*SimMessageResponse, error)
	PRSend(ctx context.Context, in *PRMessageRequest, opts ...grpc.CallOption) (*PRMessageResponse, error)
}

type workerClient struct {
	cc *grpc.ClientConn
}

func NewWorkerClient(cc *grpc.ClientConn) WorkerClient {
	return &workerClient{cc}
}

func (c *workerClient) ShutDown(ctx context.Context, in *ShutDownRequest, opts ...grpc.CallOption) (*ShutDownResponse, error) {
	out := new(ShutDownResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Worker/ShutDown", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) PEval(ctx context.Context, in *PEvalRequest, opts ...grpc.CallOption) (*PEvalResponse, error) {
	out := new(PEvalResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Worker/PEval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) IncEval(ctx context.Context, in *IncEvalRequest, opts ...grpc.CallOption) (*IncEvalResponse, error) {
	out := new(IncEvalResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Worker/IncEval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) ExchangeMessage(ctx context.Context, in *ExchangeRequest, opts ...grpc.CallOption) (*ExchangeResponse, error) {
	out := new(ExchangeResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Worker/ExchangeMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) Assemble(ctx context.Context, in *AssembleRequest, opts ...grpc.CallOption) (*AssembleResponse, error) {
	out := new(AssembleResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Worker/Assemble", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) SSSPSend(ctx context.Context, in *SSSPMessageRequest, opts ...grpc.CallOption) (*SSSPMessageResponse, error) {
	out := new(SSSPMessageResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Worker/SSSPSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) SimSend(ctx context.Context, in *SimMessageRequest, opts ...grpc.CallOption) (*SimMessageResponse, error) {
	out := new(SimMessageResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Worker/simSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *workerClient) PRSend(ctx context.Context, in *PRMessageRequest, opts ...grpc.CallOption) (*PRMessageResponse, error) {
	out := new(PRMessageResponse)
	err := c.cc.Invoke(ctx, "/protobuf.Worker/PRSend", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WorkerServer is the server API for Worker service.
type WorkerServer interface {
	//service to master
	ShutDown(context.Context, *ShutDownRequest) (*ShutDownResponse, error)
	PEval(context.Context, *PEvalRequest) (*PEvalResponse, error)
	IncEval(context.Context, *IncEvalRequest) (*IncEvalResponse, error)
	ExchangeMessage(context.Context, *ExchangeRequest) (*ExchangeResponse, error)
	Assemble(context.Context, *AssembleRequest) (*AssembleResponse, error)
	//service to worker
	SSSPSend(context.Context, *SSSPMessageRequest) (*SSSPMessageResponse, error)
	SimSend(context.Context, *SimMessageRequest) (*SimMessageResponse, error)
	PRSend(context.Context, *PRMessageRequest) (*PRMessageResponse, error)
}

// UnimplementedWorkerServer can be embedded to have forward compatible implementations.
type UnimplementedWorkerServer struct {
}

func (*UnimplementedWorkerServer) ShutDown(ctx context.Context, req *ShutDownRequest) (*ShutDownResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ShutDown not implemented")
}
func (*UnimplementedWorkerServer) PEval(ctx context.Context, req *PEvalRequest) (*PEvalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PEval not implemented")
}
func (*UnimplementedWorkerServer) IncEval(ctx context.Context, req *IncEvalRequest) (*IncEvalResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IncEval not implemented")
}
func (*UnimplementedWorkerServer) ExchangeMessage(ctx context.Context, req *ExchangeRequest) (*ExchangeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ExchangeMessage not implemented")
}
func (*UnimplementedWorkerServer) Assemble(ctx context.Context, req *AssembleRequest) (*AssembleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Assemble not implemented")
}
func (*UnimplementedWorkerServer) SSSPSend(ctx context.Context, req *SSSPMessageRequest) (*SSSPMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SSSPSend not implemented")
}
func (*UnimplementedWorkerServer) SimSend(ctx context.Context, req *SimMessageRequest) (*SimMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SimSend not implemented")
}
func (*UnimplementedWorkerServer) PRSend(ctx context.Context, req *PRMessageRequest) (*PRMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PRSend not implemented")
}

func RegisterWorkerServer(s *grpc.Server, srv WorkerServer) {
	s.RegisterService(&_Worker_serviceDesc, srv)
}

func _Worker_ShutDown_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ShutDownRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).ShutDown(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/ShutDown",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).ShutDown(ctx, req.(*ShutDownRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_PEval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PEvalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).PEval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/PEval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).PEval(ctx, req.(*PEvalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_IncEval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IncEvalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).IncEval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/IncEval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).IncEval(ctx, req.(*IncEvalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_ExchangeMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).ExchangeMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/ExchangeMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).ExchangeMessage(ctx, req.(*ExchangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_Assemble_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AssembleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).Assemble(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/Assemble",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).Assemble(ctx, req.(*AssembleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_SSSPSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SSSPMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).SSSPSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/SSSPSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).SSSPSend(ctx, req.(*SSSPMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_SimSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).SimSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/SimSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).SimSend(ctx, req.(*SimMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Worker_PRSend_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PRMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WorkerServer).PRSend(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protobuf.Worker/PRSend",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WorkerServer).PRSend(ctx, req.(*PRMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Worker_serviceDesc = grpc.ServiceDesc{
	ServiceName: "protobuf.Worker",
	HandlerType: (*WorkerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ShutDown",
			Handler:    _Worker_ShutDown_Handler,
		},
		{
			MethodName: "PEval",
			Handler:    _Worker_PEval_Handler,
		},
		{
			MethodName: "IncEval",
			Handler:    _Worker_IncEval_Handler,
		},
		{
			MethodName: "ExchangeMessage",
			Handler:    _Worker_ExchangeMessage_Handler,
		},
		{
			MethodName: "Assemble",
			Handler:    _Worker_Assemble_Handler,
		},
		{
			MethodName: "SSSPSend",
			Handler:    _Worker_SSSPSend_Handler,
		},
		{
			MethodName: "simSend",
			Handler:    _Worker_SimSend_Handler,
		},
		{
			MethodName: "PRSend",
			Handler:    _Worker_PRSend_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "worker_service.proto",
}

func (m *ShutDownRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutDownRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShutDownRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ShutDownResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShutDownResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ShutDownResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.IterationNum != 0 {
		i = encodeVarintWorkerService(dAtA, i, uint64(m.IterationNum))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *ExchangeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExchangeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ExchangeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PEvalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PEvalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PEvalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *PEvalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PEvalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PEvalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *IncEvalRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncEvalRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncEvalRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *IncEvalResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *IncEvalResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *IncEvalResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Update {
		i--
		if m.Update {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *AssembleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssembleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssembleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *AssembleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AssembleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *AssembleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Ok {
		i--
		if m.Ok {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SSSPMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSSPMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSSPMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CalculateStep {
		i--
		if m.CalculateStep {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pair) > 0 {
		for iNdEx := len(m.Pair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkerService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SSSPMessageStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSSPMessageStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSSPMessageStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Distance != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Distance))))
		i--
		dAtA[i] = 0x11
	}
	if m.NodeID != 0 {
		i = encodeVarintWorkerService(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *SSSPMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SSSPMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SSSPMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SimMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FromId != 0 {
		i = encodeVarintWorkerService(dAtA, i, uint64(m.FromId))
		i--
		dAtA[i] = 0x18
	}
	if m.CalculateStep {
		i--
		if m.CalculateStep {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pair) > 0 {
		for iNdEx := len(m.Pair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkerService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *SimMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *SimMessageStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SimMessageStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SimMessageStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Times != 0 {
		i = encodeVarintWorkerService(dAtA, i, uint64(m.Times))
		i--
		dAtA[i] = 0x18
	}
	if m.DataId != 0 {
		i = encodeVarintWorkerService(dAtA, i, uint64(m.DataId))
		i--
		dAtA[i] = 0x10
	}
	if m.PatternId != 0 {
		i = encodeVarintWorkerService(dAtA, i, uint64(m.PatternId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *PRMessageRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PRMessageRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PRMessageRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.CalculateStep {
		i--
		if m.CalculateStep {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Pair) > 0 {
		for iNdEx := len(m.Pair) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Pair[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintWorkerService(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *PRMessageResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PRMessageResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PRMessageResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	return len(dAtA) - i, nil
}

func (m *PRMessageStruct) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PRMessageStruct) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *PRMessageStruct) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.PrVal != 0 {
		i -= 8
		encoding_binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.PrVal))))
		i--
		dAtA[i] = 0x11
	}
	if m.NodeID != 0 {
		i = encodeVarintWorkerService(dAtA, i, uint64(m.NodeID))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintWorkerService(dAtA []byte, offset int, v uint64) int {
	offset -= sovWorkerService(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ShutDownRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ShutDownResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IterationNum != 0 {
		n += 1 + sovWorkerService(uint64(m.IterationNum))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *ExchangeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PEvalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PEvalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncEvalRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *IncEvalResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Update {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AssembleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *AssembleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Ok {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SSSPMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pair) > 0 {
		for _, e := range m.Pair {
			l = e.Size()
			n += 1 + l + sovWorkerService(uint64(l))
		}
	}
	if m.CalculateStep {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SSSPMessageStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovWorkerService(uint64(m.NodeID))
	}
	if m.Distance != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SSSPMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pair) > 0 {
		for _, e := range m.Pair {
			l = e.Size()
			n += 1 + l + sovWorkerService(uint64(l))
		}
	}
	if m.CalculateStep {
		n += 2
	}
	if m.FromId != 0 {
		n += 1 + sovWorkerService(uint64(m.FromId))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *SimMessageStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.PatternId != 0 {
		n += 1 + sovWorkerService(uint64(m.PatternId))
	}
	if m.DataId != 0 {
		n += 1 + sovWorkerService(uint64(m.DataId))
	}
	if m.Times != 0 {
		n += 1 + sovWorkerService(uint64(m.Times))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PRMessageRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Pair) > 0 {
		for _, e := range m.Pair {
			l = e.Size()
			n += 1 + l + sovWorkerService(uint64(l))
		}
	}
	if m.CalculateStep {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PRMessageResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *PRMessageStruct) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NodeID != 0 {
		n += 1 + sovWorkerService(uint64(m.NodeID))
	}
	if m.PrVal != 0 {
		n += 9
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovWorkerService(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozWorkerService(x uint64) (n int) {
	return sovWorkerService(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ShutDownRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: shutDownRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: shutDownRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShutDownResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: shutDownResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: shutDownResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IterationNum", wireType)
			}
			m.IterationNum = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IterationNum |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: exchangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: exchangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExchangeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: exchangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: exchangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PEvalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: pEvalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: pEvalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PEvalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: pEvalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: pEvalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncEvalRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: incEvalRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: incEvalRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *IncEvalResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: incEvalResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: incEvalResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Update", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Update = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssembleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: assembleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: assembleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AssembleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: assembleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: assembleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ok", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Ok = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSSPMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sSSPMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sSSPMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = append(m.Pair, &SSSPMessageStruct{})
			if err := m.Pair[len(m.Pair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculateStep", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CalculateStep = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSSPMessageStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sSSPMessageStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sSSPMessageStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Distance", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Distance = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SSSPMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: sSSPMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: sSSPMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: simMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: simMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = append(m.Pair, &SimMessageStruct{})
			if err := m.Pair[len(m.Pair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculateStep", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CalculateStep = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FromId", wireType)
			}
			m.FromId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FromId |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: simMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: simMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SimMessageStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: simMessageStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: simMessageStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PatternId", wireType)
			}
			m.PatternId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PatternId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DataId", wireType)
			}
			m.DataId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DataId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Times", wireType)
			}
			m.Times = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Times |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PRMessageRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: pRMessageRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: pRMessageRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pair", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthWorkerService
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthWorkerService
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pair = append(m.Pair, &PRMessageStruct{})
			if err := m.Pair[len(m.Pair)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CalculateStep", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.CalculateStep = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PRMessageResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: pRMessageResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: pRMessageResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PRMessageStruct) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: pRMessageStruct: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: pRMessageStruct: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NodeID", wireType)
			}
			m.NodeID = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NodeID |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrVal", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(encoding_binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.PrVal = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := skipWorkerService(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthWorkerService
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipWorkerService(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowWorkerService
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowWorkerService
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthWorkerService
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthWorkerService
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowWorkerService
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipWorkerService(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthWorkerService
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthWorkerService = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowWorkerService   = fmt.Errorf("proto: integer overflow")
)
